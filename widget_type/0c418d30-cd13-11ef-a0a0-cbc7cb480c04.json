{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "modem_state",
    "name" : "Modem State",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "static",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div class=\"widget-container\">\n  <div class=\"status-card\">\n    <div class=\"status-item\">\n      <div class=\"status-label\">Cell Connection</div>\n      <div class=\"status-value\" id=\"cellStatus\">\n        <span class=\"status-indicator\" id=\"cellIndicator\"></span>\n        <span id=\"cellText\">Loading...</span>\n      </div>\n    </div>\n    <div class=\"status-item\">\n      <div class=\"status-label\">WOG Status</div>\n      <div class=\"status-value\" id=\"wogStatus\">\n        <span class=\"status-indicator\" id=\"wogIndicator\"></span>\n        <span id=\"wogText\">Loading...</span>\n      </div>\n    </div>\n  </div>\n\n  <style>\n    .widget-container {\n      padding: 16px;\n      font-family: Roboto, sans-serif;\n    }\n    \n    .status-card {\n      background: white;\n      border-radius: 8px;\n      padding: 16px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n    \n    .status-item {\n      margin-bottom: 16px;\n    }\n    \n    .status-item:last-child {\n      margin-bottom: 0;\n    }\n    \n    .status-label {\n      font-size: 14px;\n      color: #757575;\n      margin-bottom: 4px;\n    }\n    \n    .status-value {\n      font-size: 16px;\n      display: flex;\n      align-items: center;\n    }\n    \n    .status-indicator {\n      width: 12px;\n      height: 12px;\n      border-radius: 50%;\n      margin-right: 8px;\n      display: inline-block;\n    }\n    \n    .status-connected {\n      background-color: #4CAF50;\n    }\n    \n    .status-disconnected {\n      background-color: #F44336;\n    }\n    \n    .status-inair {\n      background-color: #2196F3;\n    }\n    \n    .status-onground {\n      background-color: #FF9800;\n    }\n  </style>\n\n  <script>\n    var scope = null;\n    var element = null;\n    \n    self.onInit = function() {\n      scope = self.ctx.$scope;\n      element = self.ctx.$container;\n\n      // Get the entity alias resolver\n      var entityAliasId = self.ctx.aliasController.getEntityAliasId('ENTITY-FROM-DASHBOARD-STATE');\n      \n      if (entityAliasId) {\n        // Create datasource\n        var datasource = {\n          type: 'entity',\n          entityAliasId: entityAliasId,\n          dataKeys: [\n            {\n              name: 'cellConnected',\n              type: 'timeseries',\n              label: 'Cell Connected',\n              color: 'rgba(0, 0, 0, 0.87)',\n              settings: {},\n              _hash: Math.random()\n            },\n            {\n              name: 'wogStatus',\n              type: 'timeseries',\n              label: 'WOG Status',\n              color: 'rgba(0, 0, 0, 0.87)',\n              settings: {},\n              _hash: Math.random()\n            }\n          ]\n        };\n\n        // Initialize subscription options\n        var subscriptionOptions = {\n          datasources: [datasource],\n          callbacks: {\n            onDataUpdated: onDataUpdated,\n            onDataUpdateError: onDataUpdateError\n          }\n        };\n\n        // Create subscription\n        self.ctx.subscriptionApi.createSubscription(subscriptionOptions, true);\n      } else {\n        console.error('Entity alias not found');\n        updateError('Entity alias not found');\n      }\n    }\n\n    function onDataUpdated(subscription, apply) {\n      var datasources = subscription.data;\n      \n      if (datasources && datasources.length > 0) {\n        var datasource = datasources[0];\n        var data = datasource.data;\n        \n        if (data && data.length > 0) {\n          data.forEach(function(keyData) {\n            if (keyData && keyData.length > 0) {\n              var latestData = keyData[keyData.length - 1];\n              \n              if (latestData.dataKey.name === 'cellConnected') {\n                updateCellStatus(latestData.value);\n              } else if (latestData.dataKey.name === 'wogStatus') {\n                updateWogStatus(latestData.value);\n              }\n            }\n          });\n        }\n      }\n    }\n\n    function onDataUpdateError(subscription, e) {\n      console.error('Error updating data:', e);\n      updateError('Error updating data');\n    }\n    \n    function updateCellStatus(connected) {\n      var indicator = element.find('#cellIndicator');\n      var text = element.find('#cellText');\n      \n      if (connected) {\n        indicator.removeClass('status-disconnected').addClass('status-connected');\n        text.text('Connected');\n      } else {\n        indicator.removeClass('status-connected').addClass('status-disconnected');\n        text.text('Disconnected');\n      }\n    }\n    \n    function updateWogStatus(status) {\n      var indicator = element.find('#wogIndicator');\n      var text = element.find('#wogText');\n      \n      indicator.removeClass('status-inair status-onground');\n      \n      switch(status) {\n        case 'inAir':\n          indicator.addClass('status-inair');\n          text.text('In Air');\n          break;\n        case 'onGround':\n          indicator.addClass('status-onground');\n          text.text('On Ground');\n          break;\n        default:\n          text.text('Unknown');\n          break;\n      }\n    }\n\n    function updateError(message) {\n      element.find('#cellText').text('Error');\n      element.find('#wogText').text('Error');\n      element.find('#cellIndicator').addClass('status-disconnected');\n      element.find('#wogIndicator').addClass('status-disconnected');\n    }\n  </script>\n</div>",
      "templateCss" : "",
      "controllerScript" : "",
      "settingsSchema" : "",
      "dataKeySettingsSchema" : "",
      "settingsDirective" : "tb-html-card-widget-settings",
      "hasBasicMode" : false,
      "defaultConfig" : "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"Modem State\",\"dropShadow\":true}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "0c418d30-cd13-11ef-a0a0-cbc7cb480c04"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}